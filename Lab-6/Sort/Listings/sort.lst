C51 COMPILER V9.60.7.0   SORT                                                              02/26/2023 20:08:21 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE SORT
OBJECT MODULE PLACED IN .\Objects\sort.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE sort.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\sort
                    -.lst) TABS(2) OBJECT(.\Objects\sort.obj)

line level    source

   1          #include <at89c5131.h>
   2          #include "lcd.h"
   3          
   4          code unsigned char start_msg[] = "  START PROGRAM  ";
   5          code unsigned char first_inp[] = "   FIRST INPUT   ";
   6          code unsigned char next_inp[] = "  NEXT INPUT   ";
   7          code unsigned char sort_msg[] = "    SORTING    ";
   8          code unsigned char completed[] = "    COMPLETED   ";
   9          code unsigned char num_msg[] = "  NUMBER TO BE  ";
  10          code unsigned char searched_msg[] = "    SEARCHED    ";
  11          code unsigned char idx_msg[] = "  THE INDEX IS  ";
  12          code unsigned char number_msg[] = "     NUMBER     ";
  13          code unsigned char ntfnd_msg[] = "    NOT FOUND   ";
  14          
  15          void main(){
  16   1        
  17   1        unsigned char num, target;
  18   1        unsigned char arr[5];
  19   1        int i, j, flag;
  20   1        lcd_init();
  21   1        
  22   1        P1 = 0x0F;
  23   1        lcd_cmd(0x80);
  24   1        lcd_write_string(start_msg);
  25   1        msdelay(5000);
  26   1        
  27   1        lcd_cmd(0x80);
  28   1        lcd_write_string(first_inp);
  29   1        msdelay(5000);
  30   1        
  31   1        for(i=0; i<5; i++){
  32   2          P1 = 0x0F;
  33   2          num = P1 & 0x0F;
  34   2          arr[i] = num;
  35   2          
  36   2          lcd_cmd(0x80);
  37   2          if(i != 4){
  38   3            lcd_write_string(next_inp);
  39   3          }
  40   2          else{
  41   3            lcd_write_string(sort_msg);
  42   3          }
  43   2        
  44   2          num <<= 4;
  45   2          P1 = num;
  46   2          msdelay(5000);
  47   2          
  48   2          if(i!=4){
  49   3            lcd_cmd(0x01);
  50   3          }
  51   2          else{
  52   3            lcd_cmd(0x80);
  53   3            lcd_write_string(sort_msg);
  54   3            lcd_cmd(0xC0);
C51 COMPILER V9.60.7.0   SORT                                                              02/26/2023 20:08:21 PAGE 2   

  55   3            lcd_write_string(completed);
  56   3          }
  57   2            
  58   2          P1 = 0x00;
  59   2          msdelay(1000);
  60   2        
  61   2        }
  62   1        
  63   1        for(i=4; i>=1; --i){
  64   2          for(j=0; j<i; ++j){
  65   3            if( arr[j] > arr[j+1] ){
  66   4              arr[j] = arr[j] ^ arr[j+1];
  67   4              arr[j+1] = arr[j] ^ arr[j+1];
  68   4              arr[j] = arr[j] ^ arr[j+1];
  69   4            }
  70   3          }
  71   2        } 
  72   1        
  73   1        lcd_cmd(0x01);
  74   1        
  75   1        for(i=0; i<5; i++){
  76   2          P1 = 0x0F;
  77   2          P1 = (arr[i]<<4);
  78   2          msdelay(5000);
  79   2          
  80   2          P1 = 0x00;
  81   2          msdelay(1000);
  82   2        }
  83   1        
  84   1        P1 = 0x0F;
  85   1        lcd_cmd(0x80);
  86   1        lcd_write_string(num_msg);
  87   1        lcd_cmd(0xC0);
  88   1        lcd_write_string(searched_msg);
  89   1        msdelay(5000);
  90   1        target = P1 & 0x0F;
  91   1        
  92   1        lcd_cmd(0x01);
  93   1        P1 = 0x00;
  94   1        msdelay(1000);
  95   1        
  96   1        flag = 0;
  97   1        for(i=0; i<5; i++){
  98   2          if(arr[i] == target){
  99   3            flag=1;
 100   3            break;
 101   3          }
 102   2        }
 103   1        
 104   1        if(flag==1){
 105   2          lcd_cmd(0x80);
 106   2          lcd_write_string(idx_msg);
 107   2          P1 = 0x00;
 108   2          P1 = ( (++i)<<4 );
 109   2        }
 110   1        else{
 111   2          lcd_cmd(0x80);
 112   2          lcd_write_string(number_msg);
 113   2          lcd_cmd(0xC0);
 114   2          lcd_write_string(ntfnd_msg);
 115   2          P1 = 0xFF;
 116   2        }
C51 COMPILER V9.60.7.0   SORT                                                              02/26/2023 20:08:21 PAGE 3   

 117   1          
 118   1        msdelay(10000);
 119   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    692    ----
   CONSTANT SIZE    =    170    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      11
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
